<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Quantum.Chemistry.DataModel</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Quantum.Chemistry.Broombridge.Data">
            <summary>
            Latest Broombridge format.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Broombridge.Data.#ctor">
            <summary>
            Constructor for empty Broombridge data structure.
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Chemistry.Broombridge.Data.Raw">
            <summary>
            Raw deserialized Broombridge data.
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Chemistry.Broombridge.Data.Schema">
            <summary>
            URL to schema defining this version of Broombridge.
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Chemistry.Broombridge.Data.VersionNumber">
            <summary>
            Broombridge instance version number
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Chemistry.Broombridge.Data.ProblemDescriptions">
            <summary>
            Collection of electronic structure problems.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Broombridge.Data.#ctor(Microsoft.Quantum.Chemistry.Broombridge.V0_2.Data)">
            <summary>
            Deserialized Broombridge data
            </summary>
            <param name="broombridgeV0_2">Broombridge data structure.</param>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.Broombridge.ProblemDescription">
            <summary>
            Electronic structure problem instance.
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Chemistry.Broombridge.ProblemDescription.EnergyOffset">
            <summary>
            Identity term of the Hamilonian.
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Chemistry.Broombridge.ProblemDescription.NOrbitals">
            <summary>
            Number of orbitals.
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Chemistry.Broombridge.ProblemDescription.NElectrons">
            <summary>
            Number of electroncs.
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Chemistry.Broombridge.ProblemDescription.OrbitalIntegralHamiltonian">
            <summary>
            Hamiltonian represented by orbital integrals.
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Chemistry.Broombridge.ProblemDescription.Wavefunctions">
            <summary>
            Collection of trial wavefunctions.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Broombridge.ProblemDescription.ProcessRawProblemDescription(Microsoft.Quantum.Chemistry.Broombridge.V0_2.ProblemDescription)">
            <summary>
            Converts the raw problem description in V0_2 Broombridge into
            in internal data format.
            </summary>
            <param name="problem">Problem description to be converted</param>
            <returns>The internal problem description data structure.</returns>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.Broombridge.V0_1">
            <summary>
            Broombridge v0.1 format
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Broombridge.V0_1.ToOrbitalIntegralHamiltonian(Microsoft.Quantum.Chemistry.Broombridge.V0_1.HamiltonianData)">
            <summary>
            Builds Hamiltonian from Broombridge orbital integral data.
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.Broombridge.V0_2">
            <summary>
            Broombridge v0.2 format.
            
            Changes from v0.1:
            // TODO - `format -> version` replaced with `version`.
            - `integral_sets` replaced with `problem_description`.
            - `metadata` is now optional.
            - Initial state suggestion `state` key removed. All values in this key are moved up one level.
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Chemistry.Broombridge.V0_2.State.Energy">
            <summary>
            Expectation energy of state relative to ProblemDescription Hamiltonian.
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Chemistry.Broombridge.V0_2.State.Superposition">
            <summary>
            Sparse multi-configurational data
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Chemistry.Broombridge.V0_2.State.ClusterOperator">
            <summary>
            Coupled-cluster operator
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.Broombridge.V0_2.ClusterOperator">
            <summary>
            Coupled-cluster operator `e^(T_1 + T_2)|reference>` where
            `|reference>` is the reference state.
            `OneBodyAmplitudes` are coefficients of one-body unitary cluster terms
            `t^{p}_{q}(a^\dag_p a_q- a^\dag_q a_p)`.
            `TwoBodyAmplitudes` are coefficients of two-body unitary cluster terms
            t^{pq}_{rs}(a^\dag_p a^\dag_q a_r a_s - a^\dag_s a^\dag_r a_q a_p)`.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Broombridge.V0_2.ToOrbitalIntegralHamiltonian(Microsoft.Quantum.Chemistry.Broombridge.V0_2.ProblemDescription)">
            <summary>
            Builds Hamiltonian from Broombridge if data is available.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Broombridge.V0_2.ParseInitialStateMethod(System.String)">
            <summary>
            Parses the method field to determine the initial state.
            </summary>
            <param name="state">String in method field.</param>
            <returns>The initial state preparation algorithm described by the given method.</returns>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.Broombridge.VersionNumber">
            <summary>
            Enumerable item for Broombridge version numbers.
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.Broombridge.Deserializers">
            <summary>
            Broombridge deserializers
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Chemistry.Broombridge.Deserializers.VersionNumberDict">
            <summary>
            Dictionary from version number strings to version number types.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Broombridge.Deserializers.GetVersionNumber(System.String)">
            <summary>
            Returns version number of Broombridge file.
            </summary>
            <param name="filename">Broombridge file address.</param>
            <returns>Version number of Broombridge file</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Broombridge.Deserializers.DeserializeBroombridge(System.String)">
            <summary>
            Returns Broombridge deserialized into the current version data structure.
            Data structure is automatically updated to the current Broombridge version.
            </summary>
            <param name="filename">Broombridge file address.</param>
            <returns>Deserializer Broombridge data strauture.</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Broombridge.Deserializers.Deserialize``1(System.String)">
            <summary>
            Generic deserializer from a file into a data structure of type `TData`.
            </summary>
            <typeparam name="TData">Type of data to be deserialized.</typeparam>
            <param name="filename">Path to data to be deserialized.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.Broombridge.Serializers">
            <summary>
            Broombridge serializers
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Broombridge.Serializers.SerializeBroombridgev0_2(Microsoft.Quantum.Chemistry.Broombridge.V0_2.Data,System.String)">
            <summary>
            Broombridge serializer
            </summary>
            <param name="filename">Broombridge filename to serialize</param>
            <returns>Serialized Broombridge</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Broombridge.DataStructures.Update(Microsoft.Quantum.Chemistry.Broombridge.V0_1.Data)">
            <summary>
            Converts v0.1 Broombridge to v0.2.
            </summary>
            <param name="input">Source Broombridge in v0.1 format.</param>
            <returns>Converted Broombridge in v0.2 format.</returns>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.LiQuiD">
            <summary>
            Methods for loading Hamiltonian data from standard formats
            into a <see cref="!:FermionHamiltonian"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.LiQuiD.Deserialize(System.String)">
            <summary>
                 Loads a Hamiltonian from integral data represented
                 in LIQùëàùëñ|‚ü© format.
                 Please see the <a href="https://stationq.github.io/Liquid/docs/LIQUiD.pdf">
                 LIQùëàùëñ|‚ü© documentation</a> for further details about the
                 format parsed by this method.
            </summary>
            <param name="filename">The name of the file to be loaded.</param>
            <returns>
                 List of electronic structure problem deserialized from the file.
            </returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.LiQuiD.DeserializeSingle(System.String)">
            <summary>
                 Loads a Hamiltonian from integral data represented
                 in LIQùëàùëñ|‚ü© format.
                 Please see the <a href="https://stationq.github.io/Liquid/docs/LIQUiD.pdf">
                 LIQùëàùëñ|‚ü© documentation</a> for further details about the
                 format parsed by this method.
            </summary>
            <param name="lines">Sequence of text describing terms of Hamiltonian.</param>
            <returns>
                 Single electronic structure problem deserialized from the file.
            </returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Extensions.Norm(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            Computes the L_p norm of coefficicients of all terms in a Hamiltonian.
            </summary>
            <param name="power">Selects type of norm.</param>
            <returns>L_p norm of Hamiltonian coefficients.</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Extensions.ToDoubleCoeff(System.Double)">
            <summary>
            Construct Double that implements the ITermValue interface. 
            </summary>
            <param name="x">Input double.</param>
            <returns>Double representing the input double.</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Extensions.Pow(System.Int32,System.Int32)">
            <summary>
            Computes `x^y` for an integer base `x` and exponent `y`
            </summary>
            <param name="x">Base.</param>
            <param name="exponent">Exponent.</param>
            <returns>An integer `x^y`</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Extensions.ToCustomString(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            String representation of elements of an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Int32"/>.
            </summary>
            <param name="ints"><see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Int32"/>.</param>
            <returns>String representation of input elements.</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Extensions.CompareArray``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Compares two equal-length sequences of integers by perform an element-wise
            comparison, starting from the first element.
            </summary>
            <param name="xArr">First sequence of elements.</param>
            <param name="yArr">Second sequence of elements.</param>
            <param name="comparer">Comparer used to define ordering of elements.</param>
            <returns>
            Returns <c>1</c> if <paramref name="xArr"/> is greater than <paramref name="yArr"/>.
            Returns <c>-1</c> if <paramref name="xArr"/> is less than <paramref name="yArr"/>.
            Returns <c>0</c> if <paramref name="xArr"/> is equal to <paramref name="yArr"/>.
            </returns>
            <example>
            CompareIntArray(new Int64[] {5}, new Int64[] {7}) == -1;
            CompareIntArray(new Int64[] {5,7}, new Int64[] {5,6}) == 1;
            CompareIntArray(new Int64[] {2,1,3}, new Int64[] {2,2,3}) == -1;
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Quantum.Chemistry.Extensions.IsInAscendingOrder``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})" -->
        <member name="M:Microsoft.Quantum.Chemistry.Extensions.Map``1(``0,System.ValueTuple{``0,System.Action}[])">
            <summary>
                 Given a value of an enumeration type, and an action for each
                 possible value of that enumeration type, performs the action
                 corresponding to the given value.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Quantum.Chemistry.Extensions.Map``2(``0,System.ValueTuple{``0,System.Func{``1}}[])" -->
        <member name="M:Microsoft.Quantum.Chemistry.Extensions.Clone``1(``0[])">
            <summary>
            Clones the values of an array, assuming that each element is a value type.
            </summary>
            <returns>A deep copy of this object.</returns>
            <typeparam name="T">Type of array to clone.</typeparam>
            <param name="array">Input array to clone.</param>
            <returns>Clone of the input array.</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Extensions.ToQSharpFormat(Microsoft.Quantum.Chemistry.Broombridge.ProblemDescription,System.String,Microsoft.Quantum.Chemistry.IndexConvention,Microsoft.Quantum.Chemistry.Paulis.QubitEncoding)">
            <summary>
            Converts an electronic structure problem description
            into a format consumable by Q# using default settings.
            </summary>
            <param name="problem">Input electronic structure problem description.</param>
            <param name="state">Selected wavefunction ansatz. This uses the Hartree‚ÄìFock state by default.</param>
            <param name="indexConvention">Convention for mapping spin-orbit indices to integer indices.</param>
            <param name="qubitEncoding">Scheme for mapping fermions to qubits.</param>
            <returns>
            A representation of <paramref name="problem" /> suitable for passing to Q# simulation operations.
            </returns>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.Fermion.Extensions">
            <summary>
            Extensions for converting fermion terms to Pauli terms.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Fermion.Extensions.GreedyStatePreparationSCF(Microsoft.Quantum.Chemistry.Fermion.FermionHamiltonian,System.Int32)">
            <summary>
            This approximates the Hamiltonian ground state by a greedy algorithm  
            that minimizes only the PP term energies. If there are no PP terms,
            states will be occupied in lexicographic order.
            </summary>
            <returns>
            Greedy trial state for minimizing Hamiltonian diagonal one-electron energy.
            </returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Fermion.Extensions.CreateHartreeFockState(Microsoft.Quantum.Chemistry.Fermion.FermionHamiltonian,System.Int32)">
            <summary>
            This approximates the Hamiltonian ground state by a greedy algorithm  
            that minimizes only the PP term energies. If there are no PP terms,
            states will be occupied in lexicographic order.
            </summary>
            <returns>
            Greedy trial state for minimizing Hamiltonian diagonal one-electron energy.
            </returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Fermion.Extensions.ToPauliHamiltonian(Microsoft.Quantum.Chemistry.Fermion.FermionHamiltonian,Microsoft.Quantum.Chemistry.Paulis.QubitEncoding)">
            <summary>
            Method for constructing a Pauli Hamiltonian from a fermion Hamiltonina.
            </summary>
            <param name="sourceHamiltonian">Input orbital integral Hamiltonian.</param>
            <param name="encoding">Identifies how the terms should be encoded on the qubits.</param>
            <returns>Fermion Hamiltonian constructed from orbital integrals.</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Fermion.Extensions.ToJordanWignerPauliTerms(Microsoft.Quantum.Chemistry.Fermion.FermionTerm,Microsoft.Quantum.Chemistry.TermType.Fermion,System.Double)">
            <summary>
            Creates all fermion terms generated by all symmetries of an orbital integral.
            </summary>
            <returns>List of fermion terms generated by all symmetries of an orbital integral.</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Fermion.Extensions.IdentifyHpqrsPermutation(System.ValueTuple{System.Collections.Generic.List{System.Int32},System.Int32[],System.Double})">
            <summary>
            Function for classifying PQRS terms that have the same set of
            spin-orbital indices, modulo the standard symmetries
            arrising from
            <list type="bullet">
            <description>
            <item>
            Orbitals are real.
            </item>
            <item>
            Electrons are indistinguishable.
            </item>
            </description>
            </list>
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Fermion.Extensions.ToIndexing(Microsoft.Quantum.Chemistry.Fermion.FermionWavefunction{Microsoft.Quantum.Chemistry.OrbitalIntegrals.SpinOrbital},Microsoft.Quantum.Chemistry.IndexConvention)">
            <summary>
            Converts spin-orbital indices to integer indices
            </summary>
            <param name="wavefunction">A fermionic wavefunction whose spin-orbital indices are to be converted.</param>
            <param name="indexConvention">The convention for mapping spin-orbitals to indices to be used in converting the spin-orbital indices of <paramref name="wavefunction" />.</param>
            <returns>
            A fermion wavefunction where spin-orbitals are indexed by integers
            according to the chosen indexing scheme.
            </returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Fermion.Extensions.CreateAllUCCSDSingletExcitations(System.Collections.Generic.IEnumerable{Microsoft.Quantum.Chemistry.OrbitalIntegrals.SpinOrbital},System.Int32)">
            <summary>
            Populates the Unitary coupled-cluster wavefunction with all possible spin-preserving exitations
            from occupied orbitals to virtual orbitals.
            </summary>
            <param name="occupiedSpinOrbitals">Occupied orbitals that annihilation operators act on.</param>
            <param name="nOrbitals">Number of orbitals.</param>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Fermion.FermionHamiltonian.AddToSystemIndices(Microsoft.Quantum.Chemistry.Fermion.HermitianFermionTerm)">
            <summary>
            Method for collecting all distinct system (orbital) indices.
            </summary>
            <param name="orbitalIntegral">Collate orbital indices from this orbital integral.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Microsoft.Quantum.Chemistry.Fermion.FermionTerm" -->
        <member name="M:Microsoft.Quantum.Chemistry.Fermion.FermionTerm.#ctor">
            <summary>
            Constructor for empty instance.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Fermion.FermionTerm.#ctor(Microsoft.Quantum.Chemistry.LadderOperators.LadderSequence{System.Int32})">
            <summary>
            Construct fermion term instance from a normal-ordered sequence of ladder operators.
            </summary>
            <param name="ladderOperators">Normal-ordered sequence of ladder operators.</param>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Fermion.FermionTerm.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Quantum.Chemistry.LadderOperators.LadderOperator{System.Int32}},System.Int32)">
            <summary>
            Construct instance from a normal-ordered sequence of ladder operators.
            </summary>
            <param name="ladderOperators">Normal-ordered sequence of ladder operators.</param>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Fermion.FermionTerm.op_Implicit(System.ValueTuple{Microsoft.Quantum.Chemistry.RaisingLowering,System.Int32}[])~Microsoft.Quantum.Chemistry.Fermion.FermionTerm">
            <summary>
            Implicit operator for creating a Ladder operator.
            </summary>
            <param name="setSequence">Tuple where the first parameter
            is the raising or lowering index, and the second parameter
            is the position index of the ladder operator.</param>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Fermion.FermionTerm.op_Implicit(System.Int32[])~Microsoft.Quantum.Chemistry.Fermion.FermionTerm">
            <summary>
            Construct a sequence of ladder operators from an even-length sequence of integers.
            </summary>
            <param name="indices">Even-length sequence of integers.</param>
            <returns>
            Sequence of ladder operators with an equal number of creation and annihilation terms
            that are normal-ordered.
            </returns>
            <example>
            <code>
            // The following two return the same ladder operator sequence.
            var seq = new[] { 1, 2, 3, 4 }.ToLadderSequence();
            var expected = new[] { (u, 1), (u, 2), (d, 3), (d, 4) }.ToLadderSequence();
            </code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Microsoft.Quantum.Chemistry.Fermion.HermitianFermionTerm" -->
        <member name="M:Microsoft.Quantum.Chemistry.Fermion.HermitianFermionTerm.#ctor">
            <summary>
            Constructor for empty instance.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Fermion.HermitianFermionTerm.#ctor(Microsoft.Quantum.Chemistry.LadderOperators.LadderSequence{System.Int32})">
            <summary>
            Constructs a Hermitian fermion term from a normal-ordered sequence of ladder operators.
            </summary>
            <param name="ladderOperators">Normal-ordered sequence of ladder operators.</param>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Fermion.HermitianFermionTerm.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Quantum.Chemistry.LadderOperators.LadderOperator{System.Int32}},System.Int32)">
            <summary>
            Constructs a Hermitian fermion term from a normal-ordered sequence of ladder operators.
            </summary>
            <param name="ladderOperators">Hermitian normal-ordered sequence of ladder operators.</param>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Fermion.HermitianFermionTerm.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Constructs a Hermitian fermion term with an equal number of creation and annihilation operators
            from a sequence of integers.
            </summary>
            <param name="ladderOperators">Hermitian normal-ordered sequence of ladder operators.</param>
        </member>
        <member name="P:Microsoft.Quantum.Chemistry.Fermion.HermitianFermionTerm.Sign">
            <summary>
            Returns the sign of this fermion term.
            </summary>
            <returns>The sign of the fermion term.</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Fermion.HermitianFermionTerm.ResetSign">
            <summary>
            Sets the sign of this fermion term to one.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Fermion.HermitianFermionTerm.IsInCanonicalOrder">
            <summary>
             Checks if raising operators indices are in ascending order, 
             then if lowering operator indices are in descending order.
            </summary>
            <returns>
            Returns <c>true</c> this condition is satisfied.
            Returns <c>false</c> otherwise.
            </returns>
            <remarks>
            This should always return <c>true</c> when invoked outside this class.
            </remarks>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Fermion.HermitianFermionTerm.NormalizeToCanonicalOrder">
            <summary>
            Additional sort using the Hermitian conjugate.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Fermion.HermitianFermionTerm.Clone">
            <summary>
            Creates a copy of this instance.
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Chemistry.Fermion.HermitianFermionTerm.TermType">
            <summary>
            Return the category of this fermion term.
            </summary>
            <returns>Category of fermion term.</returns>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.Fermion.FermionWavefunction`1">
            <summary>
            Class for storing any fermion wavefunction type.
            </summary>
            <typeparam name="TIndex">Index type used for all fermion operators.</typeparam>
        </member>
        <member name="P:Microsoft.Quantum.Chemistry.Fermion.FermionWavefunction`1.Method">
            <summary>
            Type of wavefunction.
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Chemistry.Fermion.FermionWavefunction`1.Energy">
            <summary>
            Energy of wavefunction relative to a Hamiltonian containing this object.
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Chemistry.Fermion.FermionWavefunction`1.SCFData">
            <summary>
            Single configurational wavefunction data.
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Chemistry.Fermion.FermionWavefunction`1.MCFData">
            <summary>
            Sparse multi configurational wavefunction data.
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Chemistry.Fermion.FermionWavefunction`1.UCCData">
            <summary>
            Unitary coupled-cluster wavefunction data.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Fermion.FermionWavefunction`1.#ctor">
            <summary>
            Constructor for empty fermion wavefunction object.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Fermion.FermionWavefunction`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructs a single-reference wave function. This 
            is treated as sparse multi-reference wave function with only
            one term.
            </summary>
            <param name="term">
            Sequence of indices of creation operators acting
            on the vacuum state.
            </param>
            <example>
            Create a list of indices of the creation operators, then
            Convert the list of indices to a `FermionWavefunction` instance.
            <code>
            var indices = new[] { 1, 2, 6 };
            var wavefunction = new FermionWavefunction&lt;int&gt;(indices);
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Fermion.FermionWavefunction`1.#ctor(System.Collections.Generic.IEnumerable{System.ValueTuple{`0[],System.Double}})">
            <summary>
            Constructs a sparse multi-reference wave function
            </summary>
            <param name="terms">
            List of tuples specifying an unnormalized superposition of
            basis states. The first item of each tuple is a list of 
            indices to the creation operator sequence acting on the vacuum state.
            The second item of each tuple is the unnormalized amplitude of the
            specified basis state.
            </param>
            <example>
            Create a list of tuples where the first item of each 
            tuple are indices to the creation operators acting on the
            vacuum state, and the second item is the coefficient
            of that basis state. Next, create a fermion wavefunction object 
            that represents the superposition.
            <code>
            var superposition = new[] 
            {
                (new[] {1, 2, 6}, 0.1),
                (new[] {2, 1, 5}, -0.2) 
            };
            var wavefunction = new FermionWavefunction&lt;int&gt;(superposition);
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Fermion.FermionWavefunction`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{System.ValueTuple{`0[],System.Double}})">
            <summary>
            Constructs a unitary coupled-cluster wave function represented
            by a unitary coupled-cluster operator acting on a single-reference
            state.
            </summary>
            <param name="reference"> Sequence of indices of creation operators acting
            on the vacuum state.</param>
            <param name="excitations"></param>
            
            <example>
            Create a list of indices of the creation operators
            for the single-reference state.
            
            Then create a list describing the cluster operator.
            The first half of each list of integers will be
            associated with the creation operators, and
            the second half with the annihilation operators.
            
            Finally, create a fermion wavefunction object that represents the 
            unitary coupled-cluster wavefunction. It is assumed implicity
            that the exponent of the unitary coupled-cluster operator
            is the cluster operator minus its Hermitian conjugate.
            <code>
            var reference = new[] { 1, 2 };
            var clusterOperator = new[]
            {
                (new [] {0, 1}, 0.123),
                (new [] {0, 3, 1, 2}, 0.456),
                (new [] {3, 2, 1, 0}, 0.789)
            };
            var wavefunction = new FermionWavefunction&lt;int&gt;(reference, clusterOperator);
            </code>
            </example>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.Fermion.SingleCFWavefunction`1">
            <summary>
            Class representing a sequence of fermionic raising and lowering operators, subject to the additional constraints: 
            1) Normal-ordered, where all raising operators are to the left of all lowering operators.
            2) Index-ordered, where are raising(lowering) operators are in ascending(descending) order.
            3) Contains only creation operators.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Fermion.SingleCFWavefunction`1.#ctor">
            <summary>
            Constructor for empty instance.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Fermion.SingleCFWavefunction`1.#ctor(Microsoft.Quantum.Chemistry.Fermion.SingleCFWavefunction{`0})">
            <summary>
            Construct a copy of the input instance.
            </summary>
            <param name="term">Sequence of ladder operators.</param>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Fermion.SingleCFWavefunction`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Construct <see cref="!:WavefunctionFermionSCF"/> from a sequence of integers.
            </summary>
            <param name="setSequence">Squence of integers.</param>
            <returns>
            Sequence of ladder operators with only creation terms in ascending order.
            that are normal-ordered.
            </returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Fermion.SingleCFWavefunction`1.SelectIndex``1(System.Func{`0,``0})">
            <summary>
            Changes the indexing scheme of this instance.
            </summary>
            <typeparam name="TNewIndex">Type of the new indexing scheme.</typeparam>
            <param name="indexFunction">Function for mapping the current scheme to the new scheme.</param>
            <returns>Instance with a new index type.</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Fermion.SingleCFWavefunction`1.ThrowExceptionIfNotOnlyRaising">
            <summary>
            This throws an ArgumentException if the operators in NormalOrderedLadderSequence are not normal-ordered.
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.Fermion.SparseMultiCFWavefunction`1">
            <summary>
            The sparse multi-configurational wavefunction is a superposition of a small number
            of single-configurational wavefunctions. In general, the quantum gate complexity of
            preparing this state is at least linear in this number.
            </summary>
            <typeparam name="TIndex">Index of fermion ladder operator.</typeparam>
        </member>
        <member name="P:Microsoft.Quantum.Chemistry.Fermion.SparseMultiCFWavefunction`1.Reference">
            <summary>
            Reference state that excitations act on.
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Chemistry.Fermion.SparseMultiCFWavefunction`1.Excitations">
            <summary>
            Un-normalized amplitudes of excitations applied to reference state.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Fermion.SparseMultiCFWavefunction`1.#ctor">
            <summary>
            Constructor for empty instance.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Fermion.SparseMultiCFWavefunction`1.SelectIndex``1(System.Func{`0,``0})">
            <summary>
            Changes the indexing scheme of this instance.
            </summary>
            <typeparam name="TNewIndex">Type of the new indexing scheme.</typeparam>
            <param name="indexFunction">Function for mapping the current scheme to the new scheme.</param>
            <returns>Instance with a new index type.</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Fermion.SparseMultiCFWavefunction`1.Set(Microsoft.Quantum.Chemistry.LadderOperators.IndexOrderedSequence{`0},System.Numerics.Complex)">
            <summary>
            Set a term of the wavefunction.
            </summary>
            <param name="term">Index to term to set amplitude of.</param>
            <param name="amplitude">Relative amplitude of term.</param>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Fermion.UnitaryCCWavefunction`1.SelectIndex``1(System.Func{`0,``0})">
            <summary>
            Changes the indexing scheme of this instance.
            </summary>
            <typeparam name="TNewIndex">Type of the new indexing scheme.</typeparam>
            <param name="indexFunction">Function for mapping the current scheme to the new scheme.</param>
            <returns>Instance with a new index type.</returns>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.Generic.Hamiltonian`3">
            <summary>
            Generic Hamiltonian class. This is the base class for any Hamiltonians,
            which are collections of categorized terms.
            </summary>
            <typeparam name="TTermClassification">Index to categories of terms.</typeparam>
            <typeparam name="TTermIndexing">Index to individual terms.</typeparam>
            <typeparam name="TTermValue">The type of the value of each Term</typeparam>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.Generic.Hamiltonian`3.HamiltonianTerm">
            <summary>
            Represents a single Terms in the Hamiltonian.
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.Generic.Hamiltonian`3.HamiltonianTerms">
            <summary>
            Represents the collection of all Terms in the Hamiltonian.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Chemistry.Generic.Hamiltonian`3.Terms">
            <summary>
            Container for all terms in a Hamiltonian.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Chemistry.Generic.Hamiltonian`3.SystemIndices">
            <summary>
            Indices to systems (e.g. fermions, qubits, or orbitals) the Hamiltonian acts on.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Generic.Hamiltonian`3.#ctor">
            <summary>
            Constructor for empty Hamiltonian.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Generic.Hamiltonian`3.#ctor(Microsoft.Quantum.Chemistry.Generic.Hamiltonian{`0,`1,`2})">
            <summary>
            Constructor for copying a Hamiltonian.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Generic.Hamiltonian`3.Add(`0,`1,`2)">
            <summary>
            Adds a term to a Hamiltonian. 
            </summary>
            <param name="type">Category of term.</param>
            <param name="index">Index to term.</param>
            <param name="coefficient">Coefficient of term.</param>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Generic.Hamiltonian`3.AddRange(`0,System.Collections.Generic.IEnumerable{System.ValueTuple{`1,`2}})">
            <summary>
            Adds multiple term to a Hamiltonian. 
            </summary>
            <param name="type">Category of terms.</param>
            <param name="terms">Enumerable sequence of terms and coefficients.</param>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Generic.Hamiltonian`3.Add(`1,`2)">
            <summary>
            Adds a term to a Hamiltonian. This method 
            infers the term category from the term index if possible.
            </summary>
            <param name="index">Index to term.</param>
            <param name="coefficient">Coefficient of term.</param>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Generic.Hamiltonian`3.AddRange(System.Collections.Generic.IEnumerable{System.ValueTuple{`1,`2}})">
            <summary>
            Add multiple terms to a Hamiltonian. This method 
            infers the term category from the term index if possible.
            </summary>
            <param name="terms">
            Enumerable sequence of terms and coefficients.
            </param>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Generic.Hamiltonian`3.GetTerm(`1)">
            <summary>
            Method for retrieving a term to a Hamiltonian. This method 
            infers the term category from the term index if possible.
            </summary>
            <param name="index">Index to term.</param>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Generic.Hamiltonian`3.AddHamiltonian(Microsoft.Quantum.Chemistry.Generic.Hamiltonian{`0,`1,`2})">
            <summary>
            Method for add all terms from a source Hamiltonian into this Hamiltonian.
            </summary>
            <param name="sourceHamiltonian">Source Hamiltonian.</param>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Generic.Hamiltonian`3.CountTerms">
            <summary>
            Counts the number of terms in a Hamiltonian.
            </summary>
            <returns>Number of terms in a Hamiltonian.</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Generic.Hamiltonian`3.CountUniqueSystemIndices">
            <summary>
            Counts the number of systems (fermions) in a Hamiltonian.
            </summary>
            <returns>Number of systems in a Hamiltonian.</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Generic.Hamiltonian`3.Norm(System.Double)">
            <summary>
            Computes the L_p norm of coefficicients of all terms in a Hamiltonian.
            </summary>
            <param name="power">Selects type of norm.</param>
            <returns>L_p norm of Hamiltonian coefficients.</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Generic.Hamiltonian`3.AddToSystemIndices(`1)">
            <summary>
            Method that add system indices to the systemIndices hashset.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Generic.Hamiltonian`3.Norm(System.Collections.Generic.IEnumerable{`0},System.Double)">
            <summary>
            Computes the L_p norm of coefficicients of categories of terms in a Hamiltonian.
            </summary>
            <param name="termTypes">Selects the categories of Hamiltonian terms.</param>
            <param name="power">Selects type of norm.</param>
            <returns>L_p norm of Hamiltonian coefficients.</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Generic.Hamiltonian`3.ToString">
            <summary>
            String representation of Hamiltonian.
            </summary>
            <returns>String representation of Hamiltonian.</returns>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.Json.FermionWavefunctionJsonConverter">
            <summary>
             This <see href="Newtonsoft.Json.JsonConverter" /> allows correctly serialized HamiltonianTerms.
            This terms are in general problematic because their keys are not strings, 
            but <see href="HamiltonianTerm" /> instances, which <see href="Newtonsoft.Json" /> doesn't like by default.
            This converts the Dictionaries to List of Tuples, in which the first
            item of the tuple is the key and the second the value.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Json.FermionWavefunctionJsonConverter.CanConvert(System.Type)">
            <summary>
            Returns true only if the Type is HamitonianTerm or HamiltonianTerms
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Json.FermionWavefunctionJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writers the HamiltonianTerms as a list of (Key, Value) tuples.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Json.FermionWavefunctionJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the HamiltonianTerms from a list of (Key, Value) tuples.
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.Json.HamiltonianTermsJsonConverter">
            <summary>
            This JsonConverter allows correctly serialized HamiltonianTerms.
            This terms are in general problematic because their keys are not strings, 
            but HamiltonianTerms, which json.net doesn't like by default. 
            This converts the Dictionaries to List of Tuples, in which the first
            item of the tuple is the key and the second the value.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Json.HamiltonianTermsJsonConverter.CanConvert(System.Type)">
            <summary>
            Returns true only if the Type is HamitonianTerm or HamiltonianTerms
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Json.HamiltonianTermsJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writers the HamiltonianTerms as a list of (Key, Value) tuples.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Json.HamiltonianTermsJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the HamiltonianTerms from a list of (Key, Value) tuples.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Json.TypeExtensions.GetBasestType(System.Type)">
            <summary>
                  Searches base types of a given type to find the type that immediately derives from
                  <see href="System.Object" />.
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.Json.LadderOperatorJsonConverter">
            <summary>
            This JsonConverter encodes of a LadderOperator as a System.ValueTuple instead of as an object.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Json.LadderOperatorJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writers the LadderOperator as a (Type, Index) tuple.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Json.LadderOperatorJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the LadderOperator from a (Type, Index) tuple.
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.Json.ILadderOperator">
            <summary>
            Ladder operators implement this interface. This interface is used to
            enable generic Json serialization.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Json.ILadderOperator._JsonSetObject(System.Object)">
            <summary>
            Sets the ladder operator parameters to be an instance 
            represented by this `object`.
            </summary>
            <param name="set">Ladder operator parameters settings.</param>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Json.ILadderOperator._JsonObjectGetIndex">
            <summary>
            Returns the index of this ladder operator as an `object`.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Json.ILadderOperator._JsonSetIndex(System.Object)">
            <summary>
            Sets the ladder operator index to be an instance 
            represented by this `object`.
            </summary>
            <param name="set">Ladder operator index settings.</param>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Json.ILadderOperator._JsonGetRaisingLowering">
            <summary>
            Returns the type of this ladder operator.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Json.ILadderOperator._JsonSetRaisingLowering(System.Object)">
            <summary>
            Sets the ladder operator type to be an instance 
            represented by this `object`.
            </summary>
            <param name="set">Ladder operator type settings.</param>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.Json.LadderSequenceJsonConverter">
            <summary>
            This JsonConverter encodes of a LadderSequence as a Tuple instead of as an object.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Json.LadderSequenceJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writers the LadderSequence as a (Sequence, Coefficient) tuple.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Json.LadderSequenceJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the LadderSequence from aa (Sequence, Coefficient) tuple.
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.Json.ILadderSequence">
            <summary>
            Ladder sequences implement this interface. This interface is used to
            enable generic Json serialization.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Microsoft.Quantum.Chemistry.LadderOperators.IndexOrderedSequence`1" -->
        <member name="M:Microsoft.Quantum.Chemistry.LadderOperators.IndexOrderedSequence`1.#ctor">
            <summary>
            Constructor for empty ladder operator sequence.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.LadderOperators.IndexOrderedSequence`1.#ctor(Microsoft.Quantum.Chemistry.LadderOperators.LadderSequence{`0})">
            <summary>
            Constructs an instance from a normal-ordered sequence of ladder operators.
            </summary>
            <param name="ladderOperators">Normal-ordered sequence of ladder operators.</param>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.LadderOperators.IndexOrderedSequence`1.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Quantum.Chemistry.LadderOperators.LadderOperator{`0}},System.Int32)">
            <summary>
            Constructs an instance from a normal-ordered sequence of ladder operators.
            </summary>
            <param name="ladderOperators">Normal-ordered sequence of ladder operators.</param>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.LadderOperators.IndexOrderedSequence`1.NormalizeToIndexOrder">
            <summary>
             Converts a <see cref="!:NormalOrderedLadderSequence"/> to index order. 
             In general, this can generate new terms and modifies the coefficient.
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.LadderOperators.LadderOperator`1">
            <summary>
            Data strcture for raising and lowering operators.
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Chemistry.LadderOperators.LadderOperator`1.Type">
            <summary>
            LadderType specifying raising or lowering operator.
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Chemistry.LadderOperators.LadderOperator`1.Index">
            <summary>
            System index operator acts on.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.LadderOperators.LadderOperator`1._JsonGetRaisingLowering">
            <summary>
            This is used only for JSON serialization.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.LadderOperators.LadderOperator`1._JsonSetRaisingLowering(System.Object)">
            <summary>
            This is used only for JSON serialization.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.LadderOperators.LadderOperator`1._JsonObjectGetIndex">
            <summary>
            Used only for JSON serialization.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.LadderOperators.LadderOperator`1._JsonSetIndex(System.Object)">
            <summary>
            Used only for JSON serialization.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.LadderOperators.LadderOperator`1._JsonSetObject(System.Object)">
            <summary>
            Used only for JSON serialization.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.LadderOperators.LadderOperator`1.#ctor(Microsoft.Quantum.Chemistry.RaisingLowering,`0)">
            <summary>
            Constructor for ladder operator.
            </summary>
            <param name="setType">Set raising or lowering operator.</param>
            <param name="setIndex">Set system index.</param>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.LadderOperators.LadderOperator`1.#ctor(System.ValueTuple{Microsoft.Quantum.Chemistry.RaisingLowering,`0})">
            <summary>
            Implicit constructor for ladder operator.
            </summary>
            <param name="set">Tuple where first item sets the operator type,
            and the second item indexes the system.</param>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.LadderOperators.LadderOperator`1.ToString">
            <summary>
            Returns a human-readable description of this object.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.LadderOperators.Extensions.ToLadderSequence(System.Collections.Generic.IEnumerable{System.ValueTuple{Microsoft.Quantum.Chemistry.RaisingLowering,System.Int32}},System.Int32)">
            <summary>
            Construct a sequence of ladder operators from sequence of tuples each
            specifying whether it is a raising or lowering term, and its index.
            </summary>
            <param name="setSequence">Sequence of ladder operators.</param>
            <param name="setSign">Set the sign coefficient of the sequence.</param>
            <returns>
            Sequence of ladder operators.
            </returns>
            <example>
            // Construct a sequence a ladder operators 1^ 2^ 3 4
            var tmp = new[] { (u, 1), (u, 2), (d, 3), (d, 4) }.ToLadderSequence();
            </example>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.LadderOperators.Extensions.ToLadderSequence(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Construct a sequence of ladder operators from an even-length sequence of integers.
            </summary>
            <param name="indices">Even-length sequence of integers.</param>
            <returns>
            Sequence of ladder operators with an equal number of creation and annihilation terms
            that are normal-ordered.
            </returns>
            <example>
            <code>
            // The following two return the same ladder operator sequence.
            var seq = new[] { 1, 2, 3, 4 }.ToLadderSequence();
            var expected = new[] { (u, 1), (u, 2), (d, 3), (d, 4) }.ToLadderSequence();
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.LadderOperators.Extensions.ToLadderSequence(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Int32,Microsoft.Quantum.Chemistry.Spin}})">
            <summary>
            Construct a sequence of ladder operators from an even-length sequence of spin-orbit indices.
            </summary>
            <param name="indices">Even-length sequence of spin-orbit indices.</param>
            <returns>
            Sequence of ladder operators with an equal number of creation and annihilation terms
            that are normal-ordered.
            </returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.LadderOperators.Extensions.ToNormalOrder``1(Microsoft.Quantum.Chemistry.LadderOperators.LadderSequence{``0})">
            <summary>
             Converts a <see cref="!:LadderSequence"/> to normal order. 
             In general, this can generate new terms and modifies the coefficient.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.LadderOperators.Extensions.ToIndexOrder``1(Microsoft.Quantum.Chemistry.LadderOperators.LadderSequence{``0})">
            <summary>
             Converts a <see cref="!:LadderSequence"/> to normal order, then index order. 
             In general, this can generate new terms and modifies the coefficient.
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.LadderOperators.LadderSequence`1">
            <summary>
            Class representing a sequence of raising and lowering operators.
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Chemistry.LadderOperators.LadderSequence`1.Sequence">
            <summary>
            Sequence of ladder operators.
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Chemistry.LadderOperators.LadderSequence`1.Coefficient">
            <summary>
            sign (-1,+1) coefficient of ladder operators.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.LadderOperators.LadderSequence`1._JsonGetSequence">
            <summary>
            Returns ladder operator sequence.
            </summary>
            <returns>Ladder operator sequence.</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.LadderOperators.LadderSequence`1._JsonSetSequence(System.Object)">
            <summary>
            Sets ladder operator sequence.
            </summary>
            <param name="set">Set ladder operator sequence to this input.</param>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.LadderOperators.LadderSequence`1._JsonGetCoefficient">
            <summary>
            Returns sign coefficient of ladder operator sequence.
            </summary>
            <returns>Sign of ladder operator sequence.</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.LadderOperators.LadderSequence`1._JsonSetCoefficient(System.Int32)">
            <summary>
            Sets sign coefficient of ladder operator sequence.
            </summary>
            <returns>Sign of ladder operator sequence.</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.LadderOperators.LadderSequence`1._JsonSetObject(System.Object)">
            <summary>
            Used only for JSON serialization.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.LadderOperators.LadderSequence`1.#ctor">
            <summary>
            Constructor for empty ladder operator sequence.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.LadderOperators.LadderSequence`1.#ctor(Microsoft.Quantum.Chemistry.LadderOperators.LadderSequence{`0})">
            <summary>
            Constructor for an identitcal ladder operator sequence.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.LadderOperators.LadderSequence`1.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Quantum.Chemistry.LadderOperators.LadderOperator{`0}},System.Int32)">
            <summary>
            Construct instance from sequence of ladder operators.
            </summary>
            <param name="setSequence">Sequence of ladder operators.</param>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.LadderOperators.LadderSequence`1.op_Implicit(System.ValueTuple{Microsoft.Quantum.Chemistry.RaisingLowering,`0}[])~Microsoft.Quantum.Chemistry.LadderOperators.LadderSequence{`0}">
            <summary>
            Implicit operator for creating a Ladder operator.
            </summary>
            <param name="setOperator">Tuple where the first parameter
            is the raising or lowering index, and the second parameter
            is the position index of the ladder operator.</param>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.LadderOperators.LadderSequence`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Construct a sequence of ladder operators from an even-length sequence of integers.
            </summary>
            <param name="indices">Even-length sequence of integers.</param>
            <returns>
            Sequence of ladder operators with an equal number of creation and annihilation terms
            that are normal-ordered.
            </returns>
            <example>
            <code>
            // The following two return the same ladder operator sequence.
            var seq = new[] { 1, 2, 3, 4 }.ToLadderSequence();
            var expected = new[] { (u, 1), (u, 2), (d, 3), (d, 4) }.ToLadderSequence();
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.LadderOperators.LadderSequence`1.IsInNormalOrder">
            <summary>
            Checks whether all raising operators are to the left of all lowering operators.
            </summary>
            <returns>
            Returns <c>true</c> this condition is satisfied.
            Returns <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.LadderOperators.LadderSequence`1.SelectIndex``1(System.Func{`0,``0})">
            <summary>
            Creates a new ladder sequence with a different indexing scheme.
            </summary>
            <typeparam name="TNewIndex">Type of the new indexing scheme.</typeparam>
            <param name="indexFunction">Function for mapping the current scheme to the new scheme.</param>
            <returns>Ladder sequence with a new index type.</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.LadderOperators.LadderSequence`1.Multiply(Microsoft.Quantum.Chemistry.LadderOperators.LadderSequence{`0},Microsoft.Quantum.Chemistry.LadderOperators.LadderSequence{`0})">
            <summary>
            Concatenates two Fermion terms.
            </summary>
            <param name="left">Left <see cref="!:LadderSequence"/> <c>x</c>.</param>
            <param name="right">Right <see cref="!:LadderSequence"/> <c>y</c>.</param>
            <returns>
            Returns new <see cref="!:LadderSequence"/> <c>xy</c> where coefficients and 
            LadderOperatorSequences are multipled together.
            </returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.LadderOperators.LadderSequence`1.UniqueIndices">
            <summary>
            Counts the number of unique system indices across all <see cref="!:LadderOperator"/> terms
            in a <see cref="!:LadderSequence"/>
            </summary>
            <returns>Number of unique system indices.</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.LadderOperators.LadderSequence`1.ToLadderSequence">
            <summary>
            Returns a copy of the ladder sequence base class.
            </summary>
            <returns>Base class of this sequence of ladder operators.</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.LadderOperators.LadderSequence`1.ToIndices">
            <summary>
            Returns list of indices of the ladder operator sequence.
            </summary>
            <returns>Sequence of integers. </returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.LadderOperators.LadderSequence`1.ToRaisingLowering">
            <summary>
            Returns sequence of raising and lowering types of the ladder operator sequence.
            </summary>
            <returns>Sequence of raising an lowering operators.</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.LadderOperators.LadderSequence`1.ToString">
            <summary>
            Returns a human-readable description of this object.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Microsoft.Quantum.Chemistry.LadderOperators.NormalOrderedSequence`1" -->
        <member name="M:Microsoft.Quantum.Chemistry.LadderOperators.NormalOrderedSequence`1.#ctor">
            <summary>
            Constructor for empty ladder operator sequence.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.LadderOperators.NormalOrderedSequence`1.#ctor(Microsoft.Quantum.Chemistry.LadderOperators.LadderSequence{`0})">
            <summary>
            Construct instance from a normal-ordered sequence of ladder operators.
            </summary>
            <param name="ladderOperators">Normal-ordered sequence of ladder operators.</param>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.LadderOperators.NormalOrderedSequence`1.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Quantum.Chemistry.LadderOperators.LadderOperator{`0}},System.Int32)">
            <summary>
            Construct instance from a normal-ordered sequence of ladder operators.
            </summary>
            <param name="ladderOperators">Normal-ordered sequence of ladder operators.</param>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.LadderOperators.NormalOrderedSequence`1.IsInIndexOrder">
            <summary>
             Checks if raising operators indices are in ascending order, 
             then if lowering operator indices are in descending order.
            </summary>
            <returns>
            Returns <c>true</c> this condition is satisfied.
            Returns <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.LadderOperators.NormalOrderedSequence`1.IsInIndexCreationCanonicalOrder">
            <summary>
             Checks whether the creation operator sequence of a <see cref="!:LadderSequence"/> is in 
             canonical order. This means
             1) <c>SpinOrbital</c> is sorted in ascending order for the creation operators.
            </summary>
            <returns><c>true</c> if the creation opeartor sequence of a <c>LadderSequence</c> is in 
            canonical order. <c>false</c> otherwise</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.LadderOperators.NormalOrderedSequence`1.IsInIndexAnnihilationCanonicalOrder">
            <summary>
             Checks whether the annihilation operator sequence of a <see cref="!:LadderSequence"/> is in 
             canonical order. This means
             1) <c>SpinOrbital</c> is sorted in descending order for the annihilation operators.
            </summary>
            <returns><c>true</c> if the annihilation opeartor sequence of a <c>LadderSequence</c> is in 
            canonical order. <c>false</c> otherwise</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.LadderOperators.NormalOrderedSequence`1.ThrowExceptionIfNotInNormalOrder">
            <summary>
            This throws an ArgumentException if the operators in NormalOrderedLadderSequence are not normal-ordered.
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.OrbitalIntegrals.OrbitalIntegral">
            <summary>
            LadderType representing orbital overlap integrals.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Chemistry.OrbitalIntegrals.OrbitalIntegral.OrbitalIndices">
            <summary>
            Indices of orbitals in the overlap integral.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Chemistry.OrbitalIntegrals.OrbitalIntegral.Coefficient">
            <summary>
            Coefficient of the orbital overlap integral.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.OrbitalIntegrals.OrbitalIntegral.#ctor">
            <summary>
            Parameterless constructors. Sets this as an empty OrbitalIntegral with coefficient 0.0
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.OrbitalIntegrals.OrbitalIntegral.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Double)">
            <summary>
            Constructor for orbital integral object.
            </summary>
            <param name="orbitalIndices">Array of orbital indices in Dirac notation.</param>
            <param name="coefficient">coefficient of orbital integral.</param>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.OrbitalIntegrals.OrbitalIntegral.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Double,Microsoft.Quantum.Chemistry.OrbitalIntegrals.OrbitalIntegral.Convention)">
            <summary>
            Constructor for orbital integral object.
            </summary>
            <param name="orbitalIndices">Array of orbital indices.</param>
            <param name="coefficient">coefficient of orbital integral.</param>
            <param name="convention">Convention for ordering of orbital indices.</param>
        </member>
        <member name="P:Microsoft.Quantum.Chemistry.OrbitalIntegrals.OrbitalIntegral.Sign">
            <summary>
            Returns the sign of this term.
            </summary>
            <returns>Sign of this term.</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.OrbitalIntegrals.OrbitalIntegral.ResetSign">
            <summary>
            Sets the sign of this fermion term to one.
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Chemistry.OrbitalIntegrals.OrbitalIntegral.Length">
            <summary>
            Returns length of indices in orbital integral.
            </summary>
            <returns>Length of orbital indices.</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.OrbitalIntegrals.OrbitalIntegral.EnumerateOrbitalSymmetries">
            <summary>
            Enumerates over all orbital integrals with the same coefficient
            as this.
            These symmetries arise from: 
            - Indistinguishability of electrons.
            - Orbitals are assumed to be real.
            </summary>
            <returns>Array of orbital integrals with the same coefficient.</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.OrbitalIntegrals.OrbitalIntegral.Clone">
            <summary>
            Creates a copy of this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.OrbitalIntegrals.OrbitalIntegral.ToCanonicalForm">
            <summary>
            Returns orbital indices sorted in a canonical form that generates
            the same set of orbital integrals through <see cref="M:Microsoft.Quantum.Chemistry.OrbitalIntegrals.OrbitalIntegral.EnumerateSpinOrbitals"/>.
            </summary>
            <returns>An <see cref="T:Microsoft.Quantum.Chemistry.OrbitalIntegrals.OrbitalIntegral"/> in canonical form.</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.OrbitalIntegrals.OrbitalIntegral.IsInCanonicalOrder">
            <summary>
            Checks of this orbital integral has indices sorted in canonical order.
            </summary>
            <returns>Returns <see cref="T:System.Boolean"/> if the orbital integral indices are canonically sorted
            and <see cref="!:false"/> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.OrbitalIntegrals.OrbitalIntegral.ToString">
            <summary>
            Override for string representation of orbital integral data.
            </summary>
            <returns>String representation of orbital integral data.</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.OrbitalIntegrals.OrbitalIntegral.EnumerateSpinOrbitals">
            <summary>
            Enumerates over all spin-orbital integrals represented 
            by this term.
            These symmetries arise from: 
            - Indistinguishability of electrons.
            - Orbitals are assumed to be real.
            - electron spins must be paired.
            </summary>
            <returns>
            Array of spin-orbital orbital integrals with the same coefficient.
            </returns>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.OrbitalIntegrals.Extensions">
            <summary>
            Extensions for converting orbital integrals to fermion terms.
            </summary>
            <summary>
            Extensions for converting spin orbitals to integers
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.OrbitalIntegrals.Extensions.ToFermionHamiltonian(Microsoft.Quantum.Chemistry.OrbitalIntegrals.OrbitalIntegralHamiltonian,Microsoft.Quantum.Chemistry.IndexConvention)">
            <summary>
            Method for constructing a fermion Hamiltonian from an orbital integral Hamiltonina.
            </summary>
            <param name="sourceHamiltonian">Input orbital integral Hamiltonian.</param>
            <param name="indexConvention">Indexing scheme from spin-orbitals to integers.</param>
            <returns>Fermion Hamiltonian constructed from orbital integrals.</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.OrbitalIntegrals.Extensions.ToHermitianFermionTerms(Microsoft.Quantum.Chemistry.OrbitalIntegrals.OrbitalIntegral,System.Int32,Microsoft.Quantum.Chemistry.IndexConvention)">
            <summary>
            Creates all fermion terms generated by all symmetries of an orbital integral.
            </summary>
            <param name="nOrbitals">Total number of distinct orbitals.</param>
            <param name="orbitalIntegral">Input orbital integral.</param>
            <param name="indexConvention">Indexing scheme from spin-orbitals to integers.</param>
            <returns>List of fermion terms generated by all symmetries of an orbital integral.</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.OrbitalIntegrals.Extensions.ToOneBodySpinOrbitalTerms(Microsoft.Quantum.Chemistry.OrbitalIntegrals.OrbitalIntegral,System.Int32,Microsoft.Quantum.Chemistry.IndexConvention)">
            <summary>
            Creates all fermion terms generated by all symmetries of a one-body orbital integral.
            </summary>
            <param name="nOrbitals">Total number of distinct orbitals.</param>
            <param name="orbitalIntegral">Input orbital integral.</param>
            <param name="indexConvention">Indexing scheme from spin-orbitals to integers.</param>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.OrbitalIntegrals.Extensions.ToTwoBodySpinOrbitalTerms(Microsoft.Quantum.Chemistry.OrbitalIntegrals.OrbitalIntegral,System.Int32,Microsoft.Quantum.Chemistry.IndexConvention)">
            <summary>
            Updates an instance of <see cref="T:Microsoft.Quantum.Chemistry.Fermion.FermionHamiltonian"/>
            with all spin-orbitals from described by a sequence of four-body orbital integrals.
            </summary>
            <param name="nOrbitals">Total number of distinct orbitals.</param>
            <param name="orbitalIntegral">Sequence of four-body orbital integrals.</param>
            <param name="indexConvention">Indexing scheme from spin-orbitals to integers.</param>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.OrbitalIntegrals.Extensions.ToInts(System.Collections.Generic.IEnumerable{Microsoft.Quantum.Chemistry.OrbitalIntegrals.SpinOrbital},Microsoft.Quantum.Chemistry.IndexConvention,System.Int32)">
            <summary>
            Converts an array of spin-orbitals into an array of integers representing each spin orbital.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.OrbitalIntegrals.Extensions.ToInts(System.Collections.Generic.IEnumerable{Microsoft.Quantum.Chemistry.OrbitalIntegrals.SpinOrbital})">
            <summary>
            Converts an array of spin-orbitals into an array of integers representing each spin orbital.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.OrbitalIntegrals.Extensions.ToSpinOrbitals(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Int32,Microsoft.Quantum.Chemistry.Spin}})">
            <summary>
            Converts an array of orbital index and spin index tuples into an array of spin-orbitals.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.OrbitalIntegrals.Extensions.ToSpinOrbitals(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Int32,System.Int32}})">
            <summary>
            Converts an array of orbital index and spin index tuples into an array of spin-orbitals.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.OrbitalIntegrals.Extensions.EnumerateSpinOrbitals(System.Collections.Generic.IEnumerable{Microsoft.Quantum.Chemistry.OrbitalIntegrals.OrbitalIntegral})">
            <summary>
            Enumerates all spin-orbitals described by an array of orbital integrals by
            applying <see cref="M:Microsoft.Quantum.Chemistry.OrbitalIntegrals.OrbitalIntegral.EnumerateSpinOrbitals"/> to each.
            </summary>
            <param name="orbitalIntegrals">Array of orbital integrals.</param>
            <returns>Array of Array of spin-orbitals.</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.OrbitalIntegrals.OrbitalIntegralHamiltonian.#ctor">
            <summary>
            Constructor for empty orbital integral Hamiltonian.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.OrbitalIntegrals.OrbitalIntegralHamiltonian.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Quantum.Chemistry.OrbitalIntegrals.OrbitalIntegral})">
            <summary>
            Constructor for orbital integral Hamiltonian from list of 
            orbital integral terms.
            </summary>
            <param name="terms">Terms to add to Hamiltonian.</param>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.OrbitalIntegrals.OrbitalIntegralHamiltonian.Add(Microsoft.Quantum.Chemistry.OrbitalIntegrals.OrbitalIntegral)">
            <summary>
            Method for adding an orbital integral term to a Hamiltonian.
            </summary>
            <param name="orbitalIntegral">Orbital integral to add to Hamiltonian.</param>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.OrbitalIntegrals.OrbitalIntegralHamiltonian.Add(System.Collections.Generic.IEnumerable{Microsoft.Quantum.Chemistry.OrbitalIntegrals.OrbitalIntegral})">
            <summary>
            Method for adding multiple orbital integrals to a Hamiltonian.
            </summary>
            <param name="orbitalIntegral">Orbital integrals to add to Hamiltonian.</param>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.OrbitalIntegrals.OrbitalIntegralHamiltonian.AddToSystemIndices(Microsoft.Quantum.Chemistry.OrbitalIntegrals.OrbitalIntegral)">
            <summary>
            Method for collecting all distinct system (orbital) indices.
            </summary>
            <param name="orbitalIntegral">Collate orbital indices from this orbital integral.</param>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.OrbitalIntegrals.SpinOrbital">
            <summary>
            Indexing scheme representing a spin-orbital.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Chemistry.OrbitalIntegrals.SpinOrbital.minOrbital">
            <summary>
            Smallest orbital index
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Chemistry.OrbitalIntegrals.SpinOrbital.maxOrbital">
            <summary>
            Largest orbital index
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Chemistry.OrbitalIntegrals.SpinOrbital.minSpin">
            <summary>
            Smallest spin index
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Chemistry.OrbitalIntegrals.SpinOrbital.maxSpin">
            <summary>
            Largest spin index
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Microsoft.Quantum.Chemistry.OrbitalIntegrals.SpinOrbital.Orbital" -->
        <!-- Badly formed XML comment ignored for member "F:Microsoft.Quantum.Chemistry.OrbitalIntegrals.SpinOrbital.Spin" -->
        <member name="M:Microsoft.Quantum.Chemistry.OrbitalIntegrals.SpinOrbital.ToInt(Microsoft.Quantum.Chemistry.IndexConvention,System.Int32)">
            <summary>
            This maps the separate orbital and spin indices of a <c>SpinOrbital</c> 
            to a single integer index. 
            </summary>
            <param name="nOrbitals">The total number of orbitals.</param>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.OrbitalIntegrals.SpinOrbital.ToInt">
            <summary>
            This maps the separate orbital and spin indices of a <c>SpinOrbital</c> 
            to a single integer index according to `2*orbitalIndex + spinIndex`.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.OrbitalIntegrals.SpinOrbital.op_Implicit(System.ValueTuple{System.Int32,Microsoft.Quantum.Chemistry.Spin})~Microsoft.Quantum.Chemistry.OrbitalIntegrals.SpinOrbital">
            <summary>
            Implicit operator for creating a spin-orbital.
            </summary>
            <param name="setIndex">Tuple where the first parameter
            is the orbital index, and the second parameter
            is the spin index.</param>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.OrbitalIntegrals.SpinOrbital.#ctor(System.Int32,Microsoft.Quantum.Chemistry.Spin)">
            <summary>
            Spin-orbital constructor.
            </summary>
            <param name="orbitalIdx">Orbital index.</param>
            <param name="spinIdx">Spin index.</param>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.OrbitalIntegrals.SpinOrbital.#ctor(System.ValueTuple{System.Int32,Microsoft.Quantum.Chemistry.Spin})">
            <summary>
            Spin-orbital constructor.
            </summary>
            <param name="idx">Tuple of (orbital index, spin index).</param>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.OrbitalIntegrals.SpinOrbital.#ctor(System.ValueTuple{System.Int32,System.Int32})">
            <summary>
            Spin-orbital constructor.
            </summary>
            <param name="idx">Tuple of (orbital index, spin index).</param>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.OrbitalIntegrals.SpinOrbital.#ctor">
            <summary>
            Empty spin-orbital constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.OrbitalIntegrals.SpinOrbital.ThrowIfInvalid">
            <summary>
            Throws an exception if spin-orbital is invalid.
            </summary>
            <returns>Returns true if spin-orbital is valid.</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.OrbitalIntegrals.SpinOrbital.Enumerate(System.Int32[],System.Int32)">
            <summary>
            This creates all possible spin-orbitals Hamiltonian terms given 
            an array of an even number of orbital indices. 
            </summary>
            <param name="nSpins">The number of possible spin states. This is 2 for electrons (spin 1/2).</param>
            <param name="orbitals">A sequence of integers representing a sequence of orbitals in Mullikan convention.</param>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.OrbitalIntegrals.SpinOrbital.ToString">
            <summary>
            Override for string representation of spin-orbital data.
            </summary>
            <returns>String representation of spin-orbital data.</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.OrbitalIntegrals.SpinOrbital.op_Equality(Microsoft.Quantum.Chemistry.OrbitalIntegrals.SpinOrbital,Microsoft.Quantum.Chemistry.OrbitalIntegrals.SpinOrbital)">
            <summary>
            Boolean equality operator definition.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.OrbitalIntegrals.SpinOrbital.op_Inequality(Microsoft.Quantum.Chemistry.OrbitalIntegrals.SpinOrbital,Microsoft.Quantum.Chemistry.OrbitalIntegrals.SpinOrbital)">
            <summary>
            Boolean inequality operator definition.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.OrbitalIntegrals.SpinOrbital.CompareTo(Microsoft.Quantum.Chemistry.OrbitalIntegrals.SpinOrbital)">
            <summary>
            Default comparer for spin orbitals first compares the orbital
            index, then second compares the spin index.
            </summary>
            <param name="x">Spin orbital to compare with.</param>
            <returns>Result of the comparison.</returns>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.Paulis.PauliHamiltonian">
            <summary>
            <para>
            Jordan‚ÄìWigner representation of a general fermion Hamiltonian <see cref="!:FermionHamiltonian"/>.
            This representation may only be created from instances of <see cref="!:FermionHamiltonian"/>,
            and stores term data in a format suitable for consumption by Q#,
            and optimized for a product formula Hamiltonian simulation algorithm.
            </para>
            <para>
            This supports the following <see cref="!:FermionTermType"/>: 
            <see cref="!:IdentityTermType"/>,
            <see cref="!:PPTermType"/>,
            <see cref="!:PQTermType"/>,
            <see cref="!:PQQPTermType"/>,
            <see cref="!:PQQRTermType"/>,
            <see cref="!:PQRSTermType"/>.
            </para>
            <para>
            Some optimizations are performed: 
            <list type="bullet">
            <item>PQQP and PP terms are merged where needed.</item>
            <item>PQQR and PR terms are merged where possible.</item>
            <item>
            All PQRS terms with the same set of spin-orbital indices are performed simultaneously,
            and only the XXXX, XXYY, XYXY, YXXY, YYYY, YYXX, YXYX, XYYX terms are only performed as
            needed.
            </item>
            <item>Terms in each group of term types are applied in lexicographic ordering.</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.Paulis.PauliTerm">
            <summary>
            Data structure for sparse representations of Pauli terms.
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Chemistry.Paulis.PauliTerm.QubitIndices">
            <summary>
            Qubit indices that represent this Pauli string.
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Chemistry.Paulis.PauliTerm.TermType">
            <summary>
            LadderType of Pauli string encoded by list of qubit indices.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Paulis.PauliTerm.#ctor(Microsoft.Quantum.Chemistry.Paulis.PauliTerm)">
            <summary>
            Construct a copy of the input instance.
            </summary>
            <param name="pauliString">Input.</param>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Paulis.PauliTerm.#ctor(System.Collections.Generic.IEnumerable{System.Int32},Microsoft.Quantum.Chemistry.TermType.PauliTerm)">
            <summary>
            Construct instance from sequence of qubit indices.
            </summary>
            <param name="pauliString">Input.</param>
        </member>
        <member name="P:Microsoft.Quantum.Chemistry.Paulis.PauliTerm.Sign">
            <summary>
            Returns the sign of this term.
            </summary>
            <returns>Sign of this term.</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Paulis.PauliTerm.ResetSign">
            <summary>
            Sets the sign of this fermion term to one.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Paulis.PauliTerm.ToString">
            <summary>
            Returns a human-readable description of this object.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Paulis.PauliTerm.Clone">
            <summary>
            Creates a copy of this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Paulis.PauliTermValue.Norm(System.Double)">
            <summary>
            Computes the L_p norm of term.
            </summary>
            <param name="power">Selects type of norm.</param>
            <returns>L_p norm of term.</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Paulis.PauliTermValue.Clone">
            <summary>
            Creates a copy of this instance.
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.Paulis.Extensions">
            <summary>
            Extensions For Pauli objects.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Paulis.Extensions.ToPauliTTermValue(System.Double)">
            <summary>
            Construct PauliTTermValue that implements the ITermValue interface. 
            </summary>
            <param name="x">Input double.</param>
            <returns>PauliTTermValue representing the input double.</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Paulis.Extensions.ToPauliTTermValue(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Construct PauliTTermValue that implements the ITermValue interface. 
            </summary>
            <param name="x">Input double  sequence.</param>
            <returns>PauliTTermValue representing the input double sequence.</returns>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.QSharpFormat.Convert">
            <summary>
            Methods for converting electronic structure problem to data for consumption by Q#.
            </summary>
            <summary>
            Methods for converting electronic structure problem to data for consumption by Q#.
            </summary>
            <summary>
            Methods for converting electronic structure problem to data for consumption by Q#.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.QSharpFormat.Convert.ToQSharpFormat(System.ValueTuple{System.Double,System.Int64,Microsoft.Quantum.Chemistry.JordanWigner.JWOptimizedHTerms},System.ValueTuple{System.Int64,Microsoft.Quantum.Simulation.Core.QArray{Microsoft.Quantum.Chemistry.JordanWigner.JordanWignerInputState}})">
            <summary>
            Combine Q# Hamiltonian and wavefunction data to a format consumed
            by the Q# chemistry libraries.
            </summary>
            <param name="pauliHamiltonianQSharpFormat">Hamiltonian data in Q# format.</param>
            <param name="wavefunctionQSharpFormat">Wavefunction data in Q# format.</param>
            <returns>Combined Hamiltonian and wave function data in Q# format.</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.QSharpFormat.Convert.ToQSharpFormat(Microsoft.Quantum.Chemistry.Fermion.FermionWavefunction{System.Int32})">
            <summary>
            Translate initial state to a format consumable by Q#.
            </summary>
            <param name="inputState">Initial state</param>
            <returns>Initial state in Q# format.</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.QSharpFormat.Convert.InitialStateSparseMultiConfigural(Microsoft.Quantum.Chemistry.Fermion.SparseMultiCFWavefunction{System.Int32})">
            <summary>
            Translate initial state specified by a superposition of <see cref="T:Microsoft.Quantum.Chemistry.Fermion.FermionTerm"/> acting on 
            the vacuum state to a format consumable by Q#
            </summary>
            /// <param name="term">List of sequences of creation operations acting on vacuum state and their coefficients.</param>
            <returns>Q# description of initial state</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.QSharpFormat.Convert.InitialStatePrep(System.Numerics.Complex,Microsoft.Quantum.Chemistry.LadderOperators.IndexOrderedSequence{System.Int32},System.Boolean)">
            <summary>
            Translate initial state specified by a <see cref="T:Microsoft.Quantum.Chemistry.Fermion.FermionTerm"/> acting on 
            the vacuum state to a format consumable by Q#
            </summary>
            <param name="term">Sequence of creation operations acting on vacuum state.</param>
            <param name="complexCoeff">coefficient of term.</param>
            <param name="checkAnnihilation">If true, throws an exception if annihilation operators act on the vacuum state.</param>
            <returns>Q# description of initial state</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.QSharpFormat.Convert.InitialStateUnitaryCoupledCluster(Microsoft.Quantum.Chemistry.Fermion.UnitaryCCWavefunction{System.Int32})">
            <summary>
            Translate initial state specified by a unitary coupled-cluster operator acting on a single-reference state
            to a format consumable by Q#.
            </summary>
            <param name="terms">single-reference state and cluster operator terms.</param>
            <returns>Q# description of unitary coupled-cluster state.</returns>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.QSharpFormat.Convert.HPQandPQQRIComparer">
            <summary>
            IComparer for sorting PQ and PQQR terms.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Microsoft.Quantum.Chemistry.QSharpFormat.Convert.HTermIndexIComparer" -->
        <member name="T:Microsoft.Quantum.Chemistry.QSharpFormat.Convert.HTermArrayComparer">
            <summary>
            Equality comparer for <see cref="T:Microsoft.Quantum.Chemistry.HTerm"/>. This compares both
            the integer sequence and the double sequence.
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.QSharpFormat.Extension">
            <summary>
            Methods for converting electronic structure problem to data for consumption by Q#.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.QSharpFormat.Extension.Pad(System.ValueTuple{System.Double,System.Int64,Microsoft.Quantum.Chemistry.JordanWigner.JWOptimizedHTerms})">
            <summary>
            Combine Q# Hamiltonian with empty wavefunciton data to a format consumed
            by the Q# chemistry libraries.
            </summary>
            <param name="pauliHamiltonianQSharpFormat">Hamiltonian data in Q# format.</param>
            <returns>Combined Hamiltonian and wave function data in Q# format.</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.QSharpFormat.Extension.Pad(System.ValueTuple{System.Int64,Microsoft.Quantum.Simulation.Core.QArray{Microsoft.Quantum.Chemistry.JordanWigner.JordanWignerInputState}})">
            <summary>
            Combine Q# wavefunction data with empty Hamiltonian data to a format consumed
            by the Q# chemistry libraries.
            </summary>
            <param name="wavefunctionQSharpFormat">Wavefunction data in Q# format.</param>
            <returns>Combined Hamiltonian and wave function data in Q# format.</returns>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.ITermIndex`2">
            <summary>
            All Hamiltonian terms must implement this interface.
            </summary>
            <typeparam name="TTermClassification">Index to categories of terms.</typeparam>
        </member>
        <member name="P:Microsoft.Quantum.Chemistry.ITermIndex`2.TermType">
            <summary>
            Compute the classification of the Hamiltonian term.
            </summary>
            <returns>Classification of Hamiltonian term.</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.ITermIndex`2.Clone">
            <summary>
            Clones the values of this object.
            </summary>
            <returns>A deep copy of this object.</returns>
        </member>
        <member name="P:Microsoft.Quantum.Chemistry.ITermIndex`2.Sign">
            <summary>
            Obtain the sign of the Hamiltonian term, if any.
            </summary>
            <returns>Sign of the term.</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.ITermIndex`2.ResetSign">
            <summary>
            Sets the sign of the Hamiltonian term to one.
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.ITermValue`1">
            <summary>
            All Hamiltonian terms must implement this interface.
            </summary>
            <typeparam name="TTermClassification">Index to categories of terms.</typeparam>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.ITermValue`1.SetValue(`0,System.Int32)">
            <summary>
            Sets the value of the Hamiltonian term.
            </summary>
            <param name="setThis">Desired value of term.</param>
            <param name="sign">Multiply the applied value by this parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.ITermValue`1.Norm(System.Double)">
            <summary>
            Computes the L_p norm of term.
            </summary>
            <param name="power">Selects type of norm.</param>
            <returns>L_p norm of term.</returns>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.TermType">
            <summary>
            Class containing a indices to a variety of term categories. 
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.Spin">
            <summary>
            Spin index up/dpwn enumeration type.
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.IndexConvention">
            <summary>
            Available indexing convention from a spin-orbital index to an integer.
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.StateType">
            <summary>
            Wavefunction types
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.RaisingLowering">
            <summary>
            Enum for raising or lowering operator.
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.DoubleCoeff">
            <summary>
            Boxed version of double that implements the <see cref="!:ITermValue"></see> interface
            that requires all values to have a method to compute its norm.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.DoubleCoeff.Norm(System.Double)">
            <summary>
            Computes the L_p norm of term.
            </summary>
            <param name="power">Selects type of norm.</param>
            <returns>L_p norm of term.</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.DoubleCoeff.ToString">
            <summary>
            Override for string representation of Double
            </summary>
            <returns>String representation of Double</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.DoubleCoeff.Clone">
            <summary>
            Creates a copy of this instance.
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.DoubleCoeff.IntegralDataFormat">
            <summary>
                Represents the possible formats that can be used to represent integral
                data sets.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Chemistry.DoubleCoeff.IntegralDataFormat.LiQuiD">
            <summary>
            Liquid format
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Chemistry.DoubleCoeff.IntegralDataFormat.Broombridge">
            <summary>
            Broombridge format
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.DoubleCoeff.JsonConverter">
            <summary>
            This JsonConverter encodes the DoubleCoeff as a double.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.DoubleCoeff.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,Microsoft.Quantum.Chemistry.DoubleCoeff,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writers the LadderOperator as a (Type, Index) tuple.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.DoubleCoeff.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,Microsoft.Quantum.Chemistry.DoubleCoeff,System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the LadderOperator from a (Type, Index) tuple.
            </summary>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.Convenience">
            <summary>
            This class contains convenience functions for simulating electronic structure problems.
            </summary>
        </member>
        <member name="P:Microsoft.Quantum.Chemistry.Convenience.ProblemContainer.Name">
            <summary>
                A label for this particular Hamiltonian.
                Can be used to identify the Hamiltonian out of set
                loaded from the same file.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Quantum.Chemistry.Convenience.LoadFromBroombridge(System.String,Microsoft.Quantum.Chemistry.IndexConvention)" -->
        <member name="T:Microsoft.Quantum.Chemistry.Workflows">
            <summary>
            Collection of convenience functions that package common
            chemistry problem workflows.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Workflows.SampleWorkflow(System.String,System.String,Microsoft.Quantum.Chemistry.IndexConvention)">
            <summary>
            Sample implementation of end-to-end electronic structure problem simulation. 
            </summary>
            <param name="filename"></param>
        </member>
        <member name="T:Microsoft.Quantum.Chemistry.Config">
            <summary>
            Configuration settings for modifying chemistry library behavior.
            </summary>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Config.Default">
            <summary>
            Construct default configuration.
            </summary>
            <returns>Default configuration class.</returns>
        </member>
        <member name="M:Microsoft.Quantum.Chemistry.Config.#ctor">
            <summary>
            Default configuration constructor;
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Chemistry.Config.UseIndexConvention">
            <summary>
            Choose indexing convention from spin-orbital index to an integer.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Chemistry.Config.UseTruncationThreshold">
            <summary>
            Threshold below which to truncate Hamiltonian coefficients.
            </summary>
        </member>
        <member name="F:Microsoft.Quantum.Chemistry.Config.UseQubitEncoding">
            <summary>
            Chose mapping from fermions operators to Pauli operatos.
            </summary>
        </member>
    </members>
</doc>
